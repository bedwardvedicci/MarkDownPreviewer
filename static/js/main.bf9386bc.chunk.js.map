{"version":3,"sources":["index.js"],"names":["Editor","props","handleChange","event","setState","preMarkedText","target","value","handleArrow","state","button","display","markedText","ReactHtmlParser","Marked","this","breaks","style","textAlign","id","onChange","placeholder","cols","rows","className","onClick","Preview","React","Component","children","ReactDOM","render","document","getElementById"],"mappings":"8OAyBMA,G,wDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAORC,aAAe,SAACC,GACd,EAAKC,SAAS,CACZC,cAAeF,EAAMG,OAAOC,SAVb,EAcnBC,YAAc,SAACL,GACb,EAAKC,UAAS,SAAAK,GACZ,MAAwB,SAAjBA,EAAMC,OACX,CAACA,OAAQ,KAAMC,QAAS,QACxB,CAACD,OAAQ,OAAQC,QAAS,aAhB9B,EAAKF,MAAQ,CACXJ,cAtBa,8cAuBbK,OAAQ,KACRC,QAAS,QALM,E,qDAuBjB,IAAMC,EAAaC,IAAgBC,IAAOC,KAAKN,MAAMJ,cAAe,CAAEW,QAAQ,KAC9E,OACE,gCACE,oBAAIC,MAAO,CAAEC,UAAW,UAAxB,8CACA,0BACEC,GAAG,SACHZ,MAAOQ,KAAKN,MAAMJ,cAClBe,SAAUL,KAAKb,aACfmB,YAAY,8BACZC,KAAK,KACLC,KAAK,OAEP,uBACA,8CACE,wBACEC,UAAaT,KAAKN,MAAMC,OACxBe,QAAWV,KAAKP,YAFlB,SAIE,mBAAGgB,UAAU,6BAIjB,cAACE,EAAD,CAASf,QAASI,KAAKN,MAAME,QAA7B,SACGC,W,GA/CUe,IAAMC,YAqDrBF,EAAU,SAACzB,GACf,OACE,qBAAKgB,MAAO,CAACN,QAASV,EAAMU,SAAUQ,GAAG,UAAzC,SACGlB,EAAM4B,YAMbC,IAASC,OAAO,cAAC/B,EAAD,IAAYgC,SAASC,eAAe,U","file":"static/js/main.bf9386bc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Marked from \"marked\";\r\nimport ReactHtmlParser from \"react-html-parser\";\r\nimport \"./index.css\"\r\n\r\n\r\nconst preMarkedInit = `\r\n# for H1\r\n## for H2!\r\n[for links](https://www.freecodecamp.org/learn)\r\n\\`<p>this is inline code</p>\\`\r\n\\`\\`\\`\r\n<h1>Hello world! this is a code block</h1>\r\n<h1>Hello world! this is a code block</h1>\r\n<h1>Hello world! this is a code block</h1>\r\n\\`\\`\\`\r\n* listItem\r\n  * nested listitem\r\n\r\n>BlockQuote\r\n\r\n**this is an image of markdown logo:**\r\n![Markdown logo](https://upload.wikimedia.org/wikipedia/commons/thumb/4/48/Markdown-mark.svg/1280px-Markdown-mark.svg.png)\r\n`\r\nclass Editor extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      preMarkedText: preMarkedInit,\r\n      button: \"up\",\r\n      display: \"none\"\r\n    }\r\n  }\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      preMarkedText: event.target.value\r\n    })\r\n  }\r\n\r\n  handleArrow = (event) => {\r\n    this.setState(state => {\r\n      return state.button === \"down\"\r\n      ? {button: \"up\", display: \"none\"}\r\n      : {button: \"down\", display: \"block\"}\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const markedText = ReactHtmlParser(Marked(this.state.preMarkedText, { breaks: true }));\r\n    return (\r\n      <div>\r\n        <h2 style={{ textAlign: \"center\" }}>Please type your Markdown below:</h2>\r\n        <textarea\r\n          id=\"editor\"\r\n          value={this.state.preMarkedText}\r\n          onChange={this.handleChange}\r\n          placeholder=\"Enter your Markdown here...\"\r\n          cols=\"50\"\r\n          rows=\"10\"\r\n        />\r\n        <hr />\r\n        <h2>The preview:\r\n          <button \r\n            className = {this.state.button}\r\n            onClick = {this.handleArrow}\r\n          >\r\n            <i className=\"fa fa-chevron-down \">\r\n            </i>\r\n          </button>\r\n        </h2>\r\n        <Preview display={this.state.display}>\r\n          {markedText}\r\n        </Preview>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst Preview = (props) => {\r\n  return (\r\n    <div style={{display: props.display}} id=\"preview\">\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nReactDOM.render(<Editor />, document.getElementById(\"root\"));"],"sourceRoot":""}